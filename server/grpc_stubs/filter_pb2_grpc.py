# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import filter_pb2 as filter__pb2


class FilterServiceStub(object):
    """сервис по работе с сервером обработки
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTestMessage = channel.unary_unary(
                '/filter.FilterService/GetTestMessage',
                request_serializer=filter__pb2.TestMessage.SerializeToString,
                response_deserializer=filter__pb2.TestMessageResponse.FromString,
                )
        self.Connect = channel.unary_unary(
                '/filter.FilterService/Connect',
                request_serializer=filter__pb2.ConnectRequest.SerializeToString,
                response_deserializer=filter__pb2.ConnectResponse.FromString,
                )
        self.DecreaseCountClients = channel.unary_unary(
                '/filter.FilterService/DecreaseCountClients',
                request_serializer=filter__pb2.DecreaseRequest.SerializeToString,
                response_deserializer=filter__pb2.DecreaseResponse.FromString,
                )
        self.IncreaseCountClients = channel.unary_unary(
                '/filter.FilterService/IncreaseCountClients',
                request_serializer=filter__pb2.IncreaseRequest.SerializeToString,
                response_deserializer=filter__pb2.IncreaseResponse.FromString,
                )


class FilterServiceServicer(object):
    """сервис по работе с сервером обработки
    """

    def GetTestMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecreaseCountClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IncreaseCountClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FilterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTestMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestMessage,
                    request_deserializer=filter__pb2.TestMessage.FromString,
                    response_serializer=filter__pb2.TestMessageResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=filter__pb2.ConnectRequest.FromString,
                    response_serializer=filter__pb2.ConnectResponse.SerializeToString,
            ),
            'DecreaseCountClients': grpc.unary_unary_rpc_method_handler(
                    servicer.DecreaseCountClients,
                    request_deserializer=filter__pb2.DecreaseRequest.FromString,
                    response_serializer=filter__pb2.DecreaseResponse.SerializeToString,
            ),
            'IncreaseCountClients': grpc.unary_unary_rpc_method_handler(
                    servicer.IncreaseCountClients,
                    request_deserializer=filter__pb2.IncreaseRequest.FromString,
                    response_serializer=filter__pb2.IncreaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'filter.FilterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FilterService(object):
    """сервис по работе с сервером обработки
    """

    @staticmethod
    def GetTestMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filter.FilterService/GetTestMessage',
            filter__pb2.TestMessage.SerializeToString,
            filter__pb2.TestMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filter.FilterService/Connect',
            filter__pb2.ConnectRequest.SerializeToString,
            filter__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecreaseCountClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filter.FilterService/DecreaseCountClients',
            filter__pb2.DecreaseRequest.SerializeToString,
            filter__pb2.DecreaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IncreaseCountClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filter.FilterService/IncreaseCountClients',
            filter__pb2.IncreaseRequest.SerializeToString,
            filter__pb2.IncreaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
