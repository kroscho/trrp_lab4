// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WriterInDB {

  /// <summary>Holder for reflection information generated from Protos/greet.proto</summary>
  public static partial class GreetReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/greet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GreetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b3MvZ3JlZXQucHJvdG8SCndyaXRlckluREIiywEKBE5vdGUSCgoC",
            "aWQYASABKAUSEAoIbW9kZWxfaWQYAiABKAUSEgoKbW9kZWxfbmFtZRgDIAEo",
            "CRIPCgdtYXJrX2lkGAQgASgFEhEKCW1hcmtfbmFtZRgFIAEoCRINCgVwcmlj",
            "ZRgGIAEoBRIPCgdjdXN0X2lkGAcgASgFEhEKCWN1c3RfbmFtZRgIIAEoCRIQ",
            "CghtYW5hZ19pZBgJIAEoBRISCgptYW5hZ19uYW1lGAogASgJEhQKDG1hbmFn",
            "X3NhbGFyeRgLIAEoBSIwCglMaXN0Tm90ZXMSIwoJTGlzdE5vdGVzGAEgAygL",
            "MhAud3JpdGVySW5EQi5Ob3RlIhgKBVJlcGx5Eg8KB21lc3NhZ2UYASABKAky",
            "PwoKV3JpdGVOb3RlcxIxCgVXcml0ZRIVLndyaXRlckluREIuTGlzdE5vdGVz",
            "GhEud3JpdGVySW5EQi5SZXBseWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WriterInDB.Note), global::WriterInDB.Note.Parser, new[]{ "Id", "ModelId", "ModelName", "MarkId", "MarkName", "Price", "CustId", "CustName", "ManagId", "ManagName", "ManagSalary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WriterInDB.ListNotes), global::WriterInDB.ListNotes.Parser, new[]{ "ListNotes_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WriterInDB.Reply), global::WriterInDB.Reply.Parser, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Note : pb::IMessage<Note> {
    private static readonly pb::MessageParser<Note> _parser = new pb::MessageParser<Note>(() => new Note());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Note> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WriterInDB.GreetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note(Note other) : this() {
      id_ = other.id_;
      modelId_ = other.modelId_;
      modelName_ = other.modelName_;
      markId_ = other.markId_;
      markName_ = other.markName_;
      price_ = other.price_;
      custId_ = other.custId_;
      custName_ = other.custName_;
      managId_ = other.managId_;
      managName_ = other.managName_;
      managSalary_ = other.managSalary_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note Clone() {
      return new Note(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 3;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark_id" field.</summary>
    public const int MarkIdFieldNumber = 4;
    private int markId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarkId {
      get { return markId_; }
      set {
        markId_ = value;
      }
    }

    /// <summary>Field number for the "mark_name" field.</summary>
    public const int MarkNameFieldNumber = 5;
    private string markName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarkName {
      get { return markName_; }
      set {
        markName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 6;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "cust_id" field.</summary>
    public const int CustIdFieldNumber = 7;
    private int custId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustId {
      get { return custId_; }
      set {
        custId_ = value;
      }
    }

    /// <summary>Field number for the "cust_name" field.</summary>
    public const int CustNameFieldNumber = 8;
    private string custName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustName {
      get { return custName_; }
      set {
        custName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manag_id" field.</summary>
    public const int ManagIdFieldNumber = 9;
    private int managId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManagId {
      get { return managId_; }
      set {
        managId_ = value;
      }
    }

    /// <summary>Field number for the "manag_name" field.</summary>
    public const int ManagNameFieldNumber = 10;
    private string managName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ManagName {
      get { return managName_; }
      set {
        managName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manag_salary" field.</summary>
    public const int ManagSalaryFieldNumber = 11;
    private int managSalary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManagSalary {
      get { return managSalary_; }
      set {
        managSalary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Note);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Note other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ModelId != other.ModelId) return false;
      if (ModelName != other.ModelName) return false;
      if (MarkId != other.MarkId) return false;
      if (MarkName != other.MarkName) return false;
      if (Price != other.Price) return false;
      if (CustId != other.CustId) return false;
      if (CustName != other.CustName) return false;
      if (ManagId != other.ManagId) return false;
      if (ManagName != other.ManagName) return false;
      if (ManagSalary != other.ManagSalary) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (MarkId != 0) hash ^= MarkId.GetHashCode();
      if (MarkName.Length != 0) hash ^= MarkName.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (CustId != 0) hash ^= CustId.GetHashCode();
      if (CustName.Length != 0) hash ^= CustName.GetHashCode();
      if (ManagId != 0) hash ^= ManagId.GetHashCode();
      if (ManagName.Length != 0) hash ^= ManagName.GetHashCode();
      if (ManagSalary != 0) hash ^= ManagSalary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ModelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModelId);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelName);
      }
      if (MarkId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MarkId);
      }
      if (MarkName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MarkName);
      }
      if (Price != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Price);
      }
      if (CustId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CustId);
      }
      if (CustName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CustName);
      }
      if (ManagId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ManagId);
      }
      if (ManagName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ManagName);
      }
      if (ManagSalary != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ManagSalary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (MarkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarkId);
      }
      if (MarkName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarkName);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (CustId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustId);
      }
      if (CustName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustName);
      }
      if (ManagId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManagId);
      }
      if (ManagName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ManagName);
      }
      if (ManagSalary != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManagSalary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Note other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.MarkId != 0) {
        MarkId = other.MarkId;
      }
      if (other.MarkName.Length != 0) {
        MarkName = other.MarkName;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.CustId != 0) {
        CustId = other.CustId;
      }
      if (other.CustName.Length != 0) {
        CustName = other.CustName;
      }
      if (other.ManagId != 0) {
        ManagId = other.ManagId;
      }
      if (other.ManagName.Length != 0) {
        ManagName = other.ManagName;
      }
      if (other.ManagSalary != 0) {
        ManagSalary = other.ManagSalary;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ModelId = input.ReadInt32();
            break;
          }
          case 26: {
            ModelName = input.ReadString();
            break;
          }
          case 32: {
            MarkId = input.ReadInt32();
            break;
          }
          case 42: {
            MarkName = input.ReadString();
            break;
          }
          case 48: {
            Price = input.ReadInt32();
            break;
          }
          case 56: {
            CustId = input.ReadInt32();
            break;
          }
          case 66: {
            CustName = input.ReadString();
            break;
          }
          case 72: {
            ManagId = input.ReadInt32();
            break;
          }
          case 82: {
            ManagName = input.ReadString();
            break;
          }
          case 88: {
            ManagSalary = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListNotes : pb::IMessage<ListNotes> {
    private static readonly pb::MessageParser<ListNotes> _parser = new pb::MessageParser<ListNotes>(() => new ListNotes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNotes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WriterInDB.GreetReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotes(ListNotes other) : this() {
      listNotes_ = other.listNotes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotes Clone() {
      return new ListNotes(this);
    }

    /// <summary>Field number for the "ListNotes" field.</summary>
    public const int ListNotes_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::WriterInDB.Note> _repeated_listNotes_codec
        = pb::FieldCodec.ForMessage(10, global::WriterInDB.Note.Parser);
    private readonly pbc::RepeatedField<global::WriterInDB.Note> listNotes_ = new pbc::RepeatedField<global::WriterInDB.Note>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WriterInDB.Note> ListNotes_ {
      get { return listNotes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNotes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNotes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!listNotes_.Equals(other.listNotes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= listNotes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      listNotes_.WriteTo(output, _repeated_listNotes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += listNotes_.CalculateSize(_repeated_listNotes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNotes other) {
      if (other == null) {
        return;
      }
      listNotes_.Add(other.listNotes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            listNotes_.AddEntriesFrom(input, _repeated_listNotes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Reply : pb::IMessage<Reply> {
    private static readonly pb::MessageParser<Reply> _parser = new pb::MessageParser<Reply>(() => new Reply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WriterInDB.GreetReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply(Reply other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply Clone() {
      return new Reply(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
